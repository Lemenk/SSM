<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--配置spring的Ioc，把service对象配置进来-->
    <bean id="accountService" class="top.lemenk.service.impl.AccountServiceImpl"></bean>

    <!--配置Logger类-->
    <bean id="logger" class="top.lemenk.utils.Logger" ></bean>



    <!--配置AOP-->
    <aop:config>

        <!--配置切入点表达式,id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容
                此标签卸载aop:aspect标签内部只能当前切面使用。
                它还可以卸载aop:aspect外面，此时就变成了所有切面可用，且需要按照约束放在切面配置之前。
            -->
        <aop:pointcut id="pt1" expression="execution(* top.lemenk.service.impl.*.*(..))"></aop:pointcut>

        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置前置通知，在切入点方法执行之前执行
            <aop:before method="beforeprintLog" pointcut-ref="pt1"></aop:before>-->

            <!--配置后置通知，在切入点方法正常执行之后执行。它与异常通知永远只能执行有一个
            <aop:after-returning method="afterReturningprintLog" pointcut-ref="pt1"></aop:after-returning>-->

            <!--配置异常通知，在切入点方法执行产生异常后执行。它与异常通知永远只能执行有一个
            <aop:after-throwing method="afterThrowingprintLog" pointcut-ref="pt1"></aop:after-throwing>-->

            <!--配置最终通知，无论切入点方法是否正常执行它都会在其后面执行
            <aop:after method="afterprintLog" pointcut-ref="pt1"></aop:after>-->

            <!--配置环绕通知-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config>



</beans>